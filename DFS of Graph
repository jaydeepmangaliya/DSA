
class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> list = new ArrayList<>();  
        int visit[] = new int[V]; 
        for( int i=0; i<V; i++){ 
            if(visit[i] == 0){ 
                dfs(list , adj , visit , i);
            }
        }
        return list;
    } 
    
    public static void dfs(ArrayList<Integer> list ,ArrayList<ArrayList<Integer>> adj , int v[] , int node ){ 
        v[node] = 1;  
        list.add(node);
         
        for( int i=0; i<adj.get(node).size(); i++){ 
            int e = adj.get(node).get(i); 
            if(v[e] == 0){ 
                dfs(list,adj ,v ,e);
            }
        }
    }
}
