<<<--------  knigth to reach target position ---->>>
class Solution
{
    //Function to find out minimum steps Knight needs to reach target position.
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    { 
        // position of knight
        int x=  KnightPos[0]; 
        int y = KnightPos[1];  
        // position of targate 
        int x1 = TargetPos[0]; 
        int y1 = TargetPos[1]; 
        if(x == x1 && y ==y1){ 
            return 0;
        } 
        int visit[][] = new int[N+1][N+1]; 
        Queue<ArrayList<Integer>> q = new LinkedList<>(); 
        ArrayList<Integer>l1= new ArrayList<>(); 
        l1.add(x); 
        l1.add(y); 
        q.add(l1);  
        // knight can move 3 step 2 continue and 1 left , right ,or up down
        while(!q.isEmpty()){ 
            int i = q.peek().get(0);
            int j  = q.peek().get(1); 
            q.poll(); 
            // 
            if(i-2 >=1 && i-2<=N && j-1 >=1 && j-1<=N && visit[i-2][j-1] == 0)
            { 
                visit[i-2][j-1] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i-2); 
                l.add(j-1); 
                q.add(l);
            }   
            //
              if(i-2 >=1 && i-2<=N && j+1 >=1 && j+1<=N && visit[i-2][j+1] == 0)
            { 
                visit[i-2][j+1] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i-2); 
                l.add(j+1); 
                q.add(l);
            }  
            //  
              if(i-1 >=1 && i-1<=N && j+2 >=1 && j+2<=N && visit[i-1][j+2] == 0)
            { 
                visit[i-1][j+2] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i-1); 
                l.add(j+2); 
                q.add(l);
            }  
            // 
              if(i+1 >=1 && i+1<=N && j+2 >=1 && j+2<=N && visit[i+1][j+2] == 0)
            { 
                visit[i+1][j+2] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i+1); 
                l.add(j+2); 
                q.add(l);
            } 
            // 
              if(i+2 >=1 && i+2<=N && j+1 >=1 && j+1<=N && visit[i+2][j+1] == 0)
            { 
                visit[i+2][j+1] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i+2); 
                l.add(j+1); 
                q.add(l);
            }  
            //
              if(i+2 >=1 && i+2<=N && j-1 >=1 && j-1<=N && visit[i+2][j-1] == 0)
            { 
                visit[i+2][j-1] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i+2); 
                l.add(j-1); 
                q.add(l);
            } 
            // 
              if(i+1 >=1 && i+1<=N && j-2 >=1 && j-2<=N && visit[i+1][j-2] == 0)
            { 
                visit[i+1][j-2] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i+1); 
                l.add(j-2); 
                q.add(l);
            }  
            // 
              if(i-1 >=1 && i-1<=N && j-2 >=1 && j-2<=N && visit[i-1][j-2] == 0)
            { 
                visit[i-1][j-2] = visit[i][j] + 1 ; 
                ArrayList<Integer> l= new ArrayList<>(); 
                l.add(i-1); 
                l.add(j-2); 
                q.add(l);
            }  
        }  
        if(visit[x1][y1] == 0){ 
            return -1;
        }
        return visit[x1][y1];
        
    }
}